// extend.name: ./_layout
// extend.props.title: Request and Response
// imports.toc: ../common/_toc
// imports.template: ~/helpers/template
// imports.snippet: ~/helpers/snippet
<%
const heading = imports.template.heading;
const block = imports.snippet.block;
%>
<h1>Request and Response</h1>

<%-imports.toc({menus: [
	{
		name: 'Introduction',
		url: '#introduction',
	},
	{
		name: 'Request',
		url: '#request',
	},
	{
		name: 'Response',
		url: '#response',
		children: [
			{
				name: 'Modes',
				url: '#response-modes'
			},
			{
				name: 'Send Response',
				url: '#response-send'
			},
			{
				name: 'Redirection',
				url: '#response-redirect'
			},
			{
				name: 'Status Code',
				url: '#response-status-code'
			},
			{
				name: 'Headers',
				url: '#response-headers'
			},
		]
	},
	{
		name: 'Handlers',
		url: '#handlers',
	},
	{
		name: 'Middlewares',
		url: '#middlewares',
	}
]})%>

<%-heading(2, 'introduction', 'Introduction')%>

<p>Request and response are singletons. They can be injected to any class to retrieve request data or modifiy the output of the response.</p>

<%-heading(2, 'request', 'Request')%>

<p><code class="language-php">Rise\Request</code> contains methods for accessing data of the incoming request.</p>
<p><code class="language-php">Rise\Request::getHttpVersion()</code> returns the HTTP version of the incoming request.</p>
<p><code class="language-php">Rise\Request::getMethod()</code> returns the HTTP method of the incoming request.</p>
<p><code class="language-php">Rise\Request::getPath()</code> returns the path of the request URL.</p>
<p><code class="language-php">Rise\Request::getHost()</code> returns the host of the request URL.</p>
<p><code class="language-php">Rise\Request::getHeader(string $key)</code> returns the value of a HTTP header.</p>
<p><code class="language-php">Rise\Request::getQuery()</code> returns GET variables.</p>
<p><code class="language-php">Rise\Request::getInput()</code> returns POST, PUT or DELETE variables.</p>
<p><code class="language-php">Rise\Request::getUrlParams()</code> returns URL parameters defined in routes configurations.</p>
<p><code class="language-php">Rise\Request::getUrlParam(string $key)</code> returns a URL parameter.</p>
<p><code class="language-php">Rise\Request::getFiles()</code> returns uploaded files.</p>

<%-heading(2, 'response', 'Response')%>

<%-heading(4, 'response-modes', 'Modes')%>

<p>There are three modes in response that will affect the usage of <code class="language-php">Rise\Response::send()</code>, they are <code class="language-php">'STRING'</code>, <code class="language-php">'FILE'</code> and <code class="language-php">'STREAM'</code>.</p>
<p><code class="language-php">'STRING'</code> is the default mode. It will send the body of the response once.</p>
<p><code class="language-php">'FILE'</code> for sending file.</p>
<p><code class="language-php">'STREAM'</code> for continuously sending content.</p>
<p><code class="language-php">Rise\Response::setMode(string $mode)</code> will set the mode. e.g.</p>
<%-block(`doc/${version}/request-and-response/response-modes.php`)%>

<%-heading(4, 'response-send', 'Send Response')%>

<p><code class="language-php">Rise\Response::send($content)</code> will send the response to browser. It will send headers first, then it will send the body of the response.</p>
<p>In <code class="language-php">'STRING'</code> mode, <code class="language-php">$content</code> will be the body of the response.</p>
<p>In <code class="language-php">'FILE'</code> mode, <code class="language-php">$content</code> will be the path of the file.</p>
<p>In <code class="language-php">'STREAM'</code> mode, <code class="language-php">$content</code> will be a chunk of the body. You can call <code class="language-php">Rise\Response::send($content)</code> multiple times to keep sending the message.</p>
<%-block(`doc/${version}/request-and-response/response-send.php`)%>

<p>For convenience, <code class="language-php">Rise\Response::sendFile(string $file)</code> can be used to send a file directly.</p>
<%-block(`doc/${version}/request-and-response/response-send-file.php`)%>

<%-heading(4, 'response-redirect', 'Redirection')%>

<p><code class="language-php">Rise\Response::redirect(string $url, int $statuCode = 302)</code> will send an HTTP redirection.</p>

<p><code class="language-php">Rise\Response::redirectRoute(string $name, array $params = [], int $statusCode = 302)</code> will send an HTTP redirection with the URL generated by a named route.</p>

<%-heading(4, 'response-status-code', 'Status Code')%>

<p><code class="language-php">Rise\Response::setStatusCode(int $code)</code> will set the status code of the response. It should be called <strong>before</strong> <code class="language-php">Rise\Response::send()</code>.</p>

<%-heading(4, 'response-headers', 'Headers')%>

<p>Response headers can be updated <strong>before</strong> the response has been sent.</p>

<p><code class="language-php">Rise\Response::hasHeader(string $name)</code> is used to check whether a header exists.</p>
<p><code class="language-php">Rise\Response::getHeaders()</code> returns all headers.</p>
<p><code class="language-php">Rise\Response::getHeader(string $name)</code> return the headers of a field name.</p>
<p><code class="language-php">Rise\Response::setHeader(string $name, $values)</code> set a header.</p>
<p><code class="language-php">Rise\Response::addHeader(string $name, $value)</code> add a header with the same field name.</p>
<p><code class="language-php">Rise\Response::unsetHeader(string $name)</code> unset all headers of a field name.</p>

<%-heading(2, 'handlers', 'Handlers')%>

<p>Handlers are the entry points configured in <a href="routing.html#build-basic">routing</a>. Method injection is supported in handlers. To send a response in handler, we can inject <code class="language-php">Rise\Response</code> in the method. For example, we have set a handler <code class="language-php">'App\Handers\Home.index'</code> for our root. To make it send <code class="language-php">'Hello world'</code> to the browser, we can change it to:</p>
<%-block(`doc/${version}/request-and-response/response-handler.php`)%>

<%-heading(2, 'middlewares', 'Middlewares')%>

<p>Middlewares can be configured in <a href="routing.html#build-middlewares">routing</a>. Just like handlers, method injection is supported in middlewares. The difference between middleware and handler is that a <code class="language-php">Closure</code> is injected into the method of a middleware and it is needed to be executed in order to run the next middleware or handler.</p>
<p>The simplest middleware will be like this, which do nothing but run the next middleware or handler.</p>
<%-block(`doc/${version}/request-and-response/response-middleware.php`)%>
